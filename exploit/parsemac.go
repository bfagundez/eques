package main

import "fmt"
import "flag"
import "strings"
import "crypto/md5"
import "encoding/hex"
import "os"


func main() {
	macPtr := flag.String("mac", "", "Mac address of the smart power plug in the format aa-bb-cc-dd-ee-ff")
	passPtr := flag.String("pass", "", "pass: Password of the smart power plug")
	flag.Parse()

	if *macPtr == "" {
		fmt.Println("the mac address of the smart power plug must be specified\n")
		flag.PrintDefaults()
		os.Exit(1)
	}

	if *passPtr == "" {
		fmt.Println("the password of the smart power plug must be specified\n")
		flag.PrintDefaults()
		os.Exit(1)
	}

	parsedMac := strings.Replace(*macPtr, "-", "", -1)
	fmt.Println(parsedMac)

	devicePass := []byte(*passPtr)
	startKey := []byte("w5%45j!a")
	endKey := []byte(",~j33in3lea^~rw2]ryxes8y")

	for i := 0; i < len(devicePass); i++ {
		startKey[i] = devicePass[i] | startKey[i]
		if startKey[i] > 126 {
			startKey[i] = 114
		}
	}

	endKey[6] = parsedMac[6]
	endKey[7] = parsedMac[7]
	endKey[10] = parsedMac[8]
	endKey[11] = parsedMac[9]
	endKey[14] = parsedMac[10]
	endKey[15] = parsedMac[11]

	combinedKey := string(startKey)+string(endKey)
	fmt.Println(string(combinedKey))

	keyHash := md5.Sum([]byte(combinedKey))
	finalKey := hex.EncodeToString(keyHash[:])

	finalEncodedKey := hex.EncodeToString([]byte(finalKey))
	fmt.Println(string(finalKey))
	fmt.Println(finalEncodedKey)
}